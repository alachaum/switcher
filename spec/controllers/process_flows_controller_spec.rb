require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ProcessFlowsController do
  render_views
  
  def mock_process_flow(stubs={})
    @mock_process_flow ||= mock_model(ProcessFlow, stubs).as_null_object
  end

  describe "GET index" do
    before(:each) do
      @p_flows = []
      5.times do
        @p_flows << Factory(:process_flow, :name => Factory.next(:p_flow_name))
      end
    end
    
    it "should be successful" do
      get :index
      response.should be_success
    end
    
    it "should have an element for each process flow" do
      get :index
      @p_flows.each do |p_flow|
        response.should have_selector("td", :content => p_flow.name)
      end
    end
  end

  describe "GET show" do
    before(:each) do
      @p_flow = Factory(:process_flow)
      @p_units = []
      5.times do
        @p_units << Factory(:process_unit, :process_flow => @p_flow, :name => Factory.next(:p_unit_name))
      end
    end
    
    it "should be successful" do
      get :show, :id => @p_flow
      response.should be_success
    end
    
    it "should display the process flow details" do
      get :show, :id => @p_flow
      response.should have_selector("p", :content => @p_flow.name)
      response.should have_selector("p", :content => @p_flow.description)
    end
    
    it "should display all the units of the process flow" do
      get :show, :id => @p_flow
      @p_units.each do |p_unit|
        response.should have_selector("td", :content => p_unit.name)
        response.should have_selector("td", :content => p_unit.description)
        response.should have_selector("td a", :href => process_unit_path(p_unit), :content => "Show")
        response.should have_selector("td a", :href => edit_process_unit_path(p_unit), :content => "Edit")
        response.should have_selector("td a", :href => process_unit_path(p_unit), :content => "Destroy", :'data-method' => "delete")
      end
    end
  end

  describe "GET new" do
    it "assigns a new process_flow as @process_flow" do
      ProcessFlow.stub(:new) { mock_process_flow }
      get :new
      assigns(:process_flow).should be(mock_process_flow)
    end
  end

  describe "GET edit" do
    it "assigns the requested process_flow as @process_flow" do
      ProcessFlow.stub(:find).with("37") { mock_process_flow }
      get :edit, :id => "37"
      assigns(:process_flow).should be(mock_process_flow)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created process_flow as @process_flow" do
        ProcessFlow.stub(:new).with({'these' => 'params'}) { mock_process_flow(:save => true) }
        post :create, :process_flow => {'these' => 'params'}
        assigns(:process_flow).should be(mock_process_flow)
      end
      
      it "should create a new process flow" do
        attr_process = {:name => "Test name", :description => "Test description"}
        lambda do
          post :create, :process_flow => attr_process
        end.should change(ProcessFlow, :count).by(1)
      end

      it "redirects to the created process_flow" do
        ProcessFlow.stub(:new) { mock_process_flow(:save => true) }
        post :create, :process_flow => {}
        response.should redirect_to(process_flow_url(mock_process_flow))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved process_flow as @process_flow" do
        ProcessFlow.stub(:new).with({'these' => 'params'}) { mock_process_flow(:save => false) }
        post :create, :process_flow => {'these' => 'params'}
        assigns(:process_flow).should be(mock_process_flow)
      end

      it "re-renders the 'new' template" do
        ProcessFlow.stub(:new) { mock_process_flow(:save => false) }
        post :create, :process_flow => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested process_flow" do
        ProcessFlow.stub(:find).with("37") { mock_process_flow }
        mock_process_flow.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :process_flow => {'these' => 'params'}
      end

      it "assigns the requested process_flow as @process_flow" do
        ProcessFlow.stub(:find) { mock_process_flow(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:process_flow).should be(mock_process_flow)
      end

      it "redirects to the process_flow" do
        ProcessFlow.stub(:find) { mock_process_flow(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(process_flow_url(mock_process_flow))
      end
    end

    describe "with invalid params" do
      it "assigns the process_flow as @process_flow" do
        ProcessFlow.stub(:find) { mock_process_flow(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:process_flow).should be(mock_process_flow)
      end

      it "re-renders the 'edit' template" do
        ProcessFlow.stub(:find) { mock_process_flow(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested process_flow" do
      ProcessFlow.stub(:find).with("37") { mock_process_flow }
      mock_process_flow.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the process_flows list" do
      ProcessFlow.stub(:find) { mock_process_flow }
      delete :destroy, :id => "1"
      response.should redirect_to(process_flows_url)
    end
  end

end
